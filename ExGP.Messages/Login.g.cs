// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExGP.Messages {

  /// <summary>Holder for reflection information generated from auth/login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for auth/login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhdXRoL2xvZ2luLnByb3RvEg1FeEdQLk1lc3NhZ2VzIjAKDExvZ2luUmVx",
            "dWVzdBINCgVlbWFpbBgBIAEoCRIRCglwYXNzX2hhc2gYAiABKAki+QEKDUxv",
            "Z2luUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBI7CgplcnJvcl9jb2RlGAIg",
            "ASgOMicuRXhHUC5NZXNzYWdlcy5Mb2dpblJlc3BvbnNlLkxvZ2luRXJyb3IS",
            "CwoDZ2lkGAMgASgJEg0KBWVtYWlsGAQgASgJEhMKC3Nlc3Npb25fa2V5GAUg",
            "ASgJEhIKCmFjY291bnRfaWQYBiABKAMiVQoKTG9naW5FcnJvchIYChRFTUFJ",
            "TF9OT1RfUkVHSVNURVJFRBAAEhQKEElOVkFMSURfUEFTU1dPUkQQARIXChNT",
            "RVNTSU9OX0tFWV9GQUlMVVJFEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.LoginRequest), global::ExGP.Messages.LoginRequest.Parser, new[]{ "Email", "PassHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.LoginResponse), global::ExGP.Messages.LoginResponse.Parser, new[]{ "Success", "ErrorCode", "Gid", "Email", "SessionKey", "AccountId" }, null, new[]{ typeof(global::ExGP.Messages.LoginResponse.Types.LoginError) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      email_ = other.email_;
      passHash_ = other.passHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pass_hash" field.</summary>
    public const int PassHashFieldNumber = 2;
    private string passHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassHash {
      get { return passHash_; }
      set {
        passHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (PassHash != other.PassHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (PassHash.Length != 0) hash ^= PassHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (PassHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PassHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (PassHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.PassHash.Length != 0) {
        PassHash = other.PassHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            PassHash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      success_ = other.success_;
      errorCode_ = other.errorCode_;
      gid_ = other.gid_;
      email_ = other.email_;
      sessionKey_ = other.sessionKey_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::ExGP.Messages.LoginResponse.Types.LoginError errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.LoginResponse.Types.LoginError ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "gid" field.</summary>
    public const int GidFieldNumber = 3;
    private string gid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gid {
      get { return gid_; }
      set {
        gid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_key" field.</summary>
    public const int SessionKeyFieldNumber = 5;
    private string sessionKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 6;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Gid != other.Gid) return false;
      if (Email != other.Email) return false;
      if (SessionKey != other.SessionKey) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Gid.Length != 0) hash ^= Gid.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (SessionKey.Length != 0) hash ^= SessionKey.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (Gid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Gid);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (SessionKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionKey);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Gid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gid);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (SessionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionKey);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Gid.Length != 0) {
        Gid = other.Gid;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.SessionKey.Length != 0) {
        SessionKey = other.SessionKey;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            errorCode_ = (global::ExGP.Messages.LoginResponse.Types.LoginError) input.ReadEnum();
            break;
          }
          case 26: {
            Gid = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            SessionKey = input.ReadString();
            break;
          }
          case 48: {
            AccountId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoginResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LoginError {
        [pbr::OriginalName("EMAIL_NOT_REGISTERED")] EmailNotRegistered = 0,
        [pbr::OriginalName("INVALID_PASSWORD")] InvalidPassword = 1,
        [pbr::OriginalName("SESSION_KEY_FAILURE")] SessionKeyFailure = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
