// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection/connection.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExGP.Messages {

  /// <summary>Holder for reflection information generated from connection/connection.proto</summary>
  public static partial class ConnectionReflection {

    #region Descriptor
    /// <summary>File descriptor for connection/connection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConnectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtjb25uZWN0aW9uL2Nvbm5lY3Rpb24ucHJvdG8SDUV4R1AuTWVzc2FnZXMa",
            "GmNvbm5lY3Rpb24va2VlcGFsaXZlLnByb3RvIk0KEUNvbm5lY3Rpb25QYXls",
            "b2FkEi0KCWtlZXBhbGl2ZRgBIAEoCzIYLkV4R1AuTWVzc2FnZXMuS2VlcGFs",
            "aXZlSABCCQoHY29udGVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ExGP.Messages.KeepaliveReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.ConnectionPayload), global::ExGP.Messages.ConnectionPayload.Parser, new[]{ "Keepalive" }, new[]{ "Content" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConnectionPayload : pb::IMessage<ConnectionPayload> {
    private static readonly pb::MessageParser<ConnectionPayload> _parser = new pb::MessageParser<ConnectionPayload>(() => new ConnectionPayload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.ConnectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPayload(ConnectionPayload other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.Keepalive:
          Keepalive = other.Keepalive.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPayload Clone() {
      return new ConnectionPayload(this);
    }

    /// <summary>Field number for the "keepalive" field.</summary>
    public const int KeepaliveFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.Keepalive Keepalive {
      get { return contentCase_ == ContentOneofCase.Keepalive ? (global::ExGP.Messages.Keepalive) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Keepalive;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Keepalive = 1,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Keepalive, other.Keepalive)) return false;
      if (ContentCase != other.ContentCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.Keepalive) hash ^= Keepalive.GetHashCode();
      hash ^= (int) contentCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentCase_ == ContentOneofCase.Keepalive) {
        output.WriteRawTag(10);
        output.WriteMessage(Keepalive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.Keepalive) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keepalive);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionPayload other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Keepalive:
          Keepalive = other.Keepalive;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::ExGP.Messages.Keepalive subBuilder = new global::ExGP.Messages.Keepalive();
            if (contentCase_ == ContentOneofCase.Keepalive) {
              subBuilder.MergeFrom(Keepalive);
            }
            input.ReadMessage(subBuilder);
            Keepalive = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
