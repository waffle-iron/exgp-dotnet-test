// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/internal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExGP.Messages {

  /// <summary>Holder for reflection information generated from internal/internal.proto</summary>
  public static partial class InternalReflection {

    #region Descriptor
    /// <summary>File descriptor for internal/internal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InternalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdpbnRlcm5hbC9pbnRlcm5hbC5wcm90bxINRXhHUC5NZXNzYWdlcxoVaW50",
            "ZXJuYWwvYXR0YWNoLnByb3RvIpwBCg9JbnRlcm5hbFBheWxvYWQSPQoOYXR0",
            "YWNoX3JlcXVlc3QYASABKAsyIy5FeEdQLk1lc3NhZ2VzLlNlcnZpY2VBdHRh",
            "Y2hSZXF1ZXN0SAASPwoPYXR0YWNoX3Jlc3BvbnNlGAIgASgLMiQuRXhHUC5N",
            "ZXNzYWdlcy5TZXJ2aWNlQXR0YWNoUmVzcG9uc2VIAEIJCgdjb250ZW50YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ExGP.Messages.AttachReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.InternalPayload), global::ExGP.Messages.InternalPayload.Parser, new[]{ "AttachRequest", "AttachResponse" }, new[]{ "Content" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InternalPayload : pb::IMessage<InternalPayload> {
    private static readonly pb::MessageParser<InternalPayload> _parser = new pb::MessageParser<InternalPayload>(() => new InternalPayload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.InternalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPayload(InternalPayload other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.AttachRequest:
          AttachRequest = other.AttachRequest.Clone();
          break;
        case ContentOneofCase.AttachResponse:
          AttachResponse = other.AttachResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalPayload Clone() {
      return new InternalPayload(this);
    }

    /// <summary>Field number for the "attach_request" field.</summary>
    public const int AttachRequestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.ServiceAttachRequest AttachRequest {
      get { return contentCase_ == ContentOneofCase.AttachRequest ? (global::ExGP.Messages.ServiceAttachRequest) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.AttachRequest;
      }
    }

    /// <summary>Field number for the "attach_response" field.</summary>
    public const int AttachResponseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.ServiceAttachResponse AttachResponse {
      get { return contentCase_ == ContentOneofCase.AttachResponse ? (global::ExGP.Messages.ServiceAttachResponse) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.AttachResponse;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      AttachRequest = 1,
      AttachResponse = 2,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AttachRequest, other.AttachRequest)) return false;
      if (!object.Equals(AttachResponse, other.AttachResponse)) return false;
      if (ContentCase != other.ContentCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.AttachRequest) hash ^= AttachRequest.GetHashCode();
      if (contentCase_ == ContentOneofCase.AttachResponse) hash ^= AttachResponse.GetHashCode();
      hash ^= (int) contentCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentCase_ == ContentOneofCase.AttachRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(AttachRequest);
      }
      if (contentCase_ == ContentOneofCase.AttachResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(AttachResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.AttachRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachRequest);
      }
      if (contentCase_ == ContentOneofCase.AttachResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalPayload other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.AttachRequest:
          AttachRequest = other.AttachRequest;
          break;
        case ContentOneofCase.AttachResponse:
          AttachResponse = other.AttachResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::ExGP.Messages.ServiceAttachRequest subBuilder = new global::ExGP.Messages.ServiceAttachRequest();
            if (contentCase_ == ContentOneofCase.AttachRequest) {
              subBuilder.MergeFrom(AttachRequest);
            }
            input.ReadMessage(subBuilder);
            AttachRequest = subBuilder;
            break;
          }
          case 18: {
            global::ExGP.Messages.ServiceAttachResponse subBuilder = new global::ExGP.Messages.ServiceAttachResponse();
            if (contentCase_ == ContentOneofCase.AttachResponse) {
              subBuilder.MergeFrom(AttachResponse);
            }
            input.ReadMessage(subBuilder);
            AttachResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
