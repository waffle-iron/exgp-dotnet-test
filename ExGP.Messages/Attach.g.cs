// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/attach.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExGP.Messages {

  /// <summary>Holder for reflection information generated from internal/attach.proto</summary>
  public static partial class AttachReflection {

    #region Descriptor
    /// <summary>File descriptor for internal/attach.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AttachReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVpbnRlcm5hbC9hdHRhY2gucHJvdG8SDUV4R1AuTWVzc2FnZXMaEmNvbW1v",
            "bi9yb3V0ZS5wcm90byJEChRTZXJ2aWNlQXR0YWNoUmVxdWVzdBIsCgpzZXJ2",
            "aWNlX2lkGAEgASgOMhguRXhHUC5NZXNzYWdlcy5TZXJ2aWNlSWQiswEKFVNl",
            "cnZpY2VBdHRhY2hSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEkQKCmVycm9y",
            "X2NvZGUYAiABKA4yMC5FeEdQLk1lc3NhZ2VzLlNlcnZpY2VBdHRhY2hSZXNw",
            "b25zZS5BdHRhY2hFcnJvciJDCgtBdHRhY2hFcnJvchIWChJJTlZBTElEX1NF",
            "UlZJQ0VfSUQQABIcChhTRVJWSUNFX0FMUkVBRFlfQVRUQUNIRUQQAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ExGP.Messages.RouteReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.ServiceAttachRequest), global::ExGP.Messages.ServiceAttachRequest.Parser, new[]{ "ServiceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExGP.Messages.ServiceAttachResponse), global::ExGP.Messages.ServiceAttachResponse.Parser, new[]{ "Success", "ErrorCode" }, null, new[]{ typeof(global::ExGP.Messages.ServiceAttachResponse.Types.AttachError) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServiceAttachRequest : pb::IMessage<ServiceAttachRequest> {
    private static readonly pb::MessageParser<ServiceAttachRequest> _parser = new pb::MessageParser<ServiceAttachRequest>(() => new ServiceAttachRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceAttachRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.AttachReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachRequest(ServiceAttachRequest other) : this() {
      serviceId_ = other.serviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachRequest Clone() {
      return new ServiceAttachRequest(this);
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 1;
    private global::ExGP.Messages.ServiceId serviceId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.ServiceId ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceAttachRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceAttachRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceId != other.ServiceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ServiceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceAttachRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serviceId_ = (global::ExGP.Messages.ServiceId) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceAttachResponse : pb::IMessage<ServiceAttachResponse> {
    private static readonly pb::MessageParser<ServiceAttachResponse> _parser = new pb::MessageParser<ServiceAttachResponse>(() => new ServiceAttachResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceAttachResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExGP.Messages.AttachReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachResponse(ServiceAttachResponse other) : this() {
      success_ = other.success_;
      errorCode_ = other.errorCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAttachResponse Clone() {
      return new ServiceAttachResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private global::ExGP.Messages.ServiceAttachResponse.Types.AttachError errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExGP.Messages.ServiceAttachResponse.Types.AttachError ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceAttachResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceAttachResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceAttachResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            errorCode_ = (global::ExGP.Messages.ServiceAttachResponse.Types.AttachError) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceAttachResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AttachError {
        [pbr::OriginalName("INVALID_SERVICE_ID")] InvalidServiceId = 0,
        /// <summary>
        ///  For now only one of each service is supported.
        /// </summary>
        [pbr::OriginalName("SERVICE_ALREADY_ATTACHED")] ServiceAlreadyAttached = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
